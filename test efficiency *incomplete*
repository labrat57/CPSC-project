package carlosGroupProjectPortion;

import java.util.PriorityQueue;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Arrays;

public class EfficiencyTest {

    public static void main(String[] args) {
//currently works for 3 paths and 6 paths
    	String[] paths = {"AB","AC","BC","BD","CD"}; //from pathConnective
    	double[] lengths = {4,5,7,4,4};//from pathConnective
    	String[] maxPaths = {"AB","AC","AD","BC","BD","CD"};
    	double efficiency = 0;

    	for (int i = 0; i < maxPaths.length; i++) {
    		
    		String getPoints = maxPaths[i];
    		char startPoint = getPoints.charAt(0);
    		char endPoint = getPoints.charAt(1);
    		boolean done = false;
    		
    		if (paths.length == 3) {
    			for (int t = 0; t < 3; t++) {
    				efficiency += 3*lengths[t];
    			}	
    			break;
    			//basically I figured out that this is always true and this saves a lot of time
    		}
    		
    		for (int t = 0; t < paths.length; t++) {
    			
    			String direct = "" + startPoint + endPoint; 
    			
    			
    			if (paths[t].equals(direct)) {
    				//if direct path from start pt to end pt
    				efficiency += lengths[t];
    				done = true;
    				break;
    			}
    			
    		}
    	//case 6 paths is accounted for
    		
    		int count = 0;
    		String Astart = "" + "A" + startPoint;
    		String startB = "" + startPoint + "B";
    		String startC = "" + startPoint + "C";
    		String startD = "" + startPoint + "D";
    	//can never have A as endPoint
    		if (!done) {
	    		for (int t = 0; t < paths.length; t++) {
	    			//how many times is the start point in paths
	    			if (paths[t].equals(startB)) {
	    				count += 1;
	    			}
	    			
	    			if (paths[t].equals(startC)) {
	    				count += 1;
	    			}
	    			
	    			if (paths[t].equals(startD)) {
	    				count += 1;
	    				
	    			}
	    			
	    			if (paths[t].equals(Astart)) {
	    				count += 1;
	    			}
	    		}
	    		System.out.println(count);
    		}
    		
    		//currently testing one element in maxpaths ex. CD
    		char currentPoint = startPoint;
    		
    		if (count == 1 && !done) {
    		//if startpt in path once and no direct path to end
    		//means we have to follow that path	
    			
	    		for (int t = 0; t < paths.length; t++) {
	    			//only one of these should be true
	    			
	    			if (paths[t].equals(Astart)) {
	    				efficiency += lengths[t];
	    				currentPoint = 'A';
	    				break;
	    			}
	    			
	    			if (paths[t].equals(startB)) {
	    				efficiency += lengths[t];
	    				currentPoint = 'B';
	    				break;
	    			}
	    			
	    			else if (paths[t].equals(startC)) {
	    				efficiency += lengths[t];
	    				currentPoint = 'C';
	    				break;
	    			}
	    			
	    			else if (paths[t].equals(startD)) {
	    				efficiency += lengths[t];
	    				currentPoint = 'D';
	    				break;
	    			}
	    		}
    		
	    		
	    		
	    		while(!done) {
		    			
		    		
		    		String midEnd = "" + currentPoint + endPoint;
		    		String endMid = "" + endPoint + currentPoint;
	    			
	    			for (int t = 0; t < paths.length; t++) {
		    			
		    			if ((paths[t].equals(midEnd))||(paths[t].equals(endMid))) {// why error
		    				//if our new point has a direct path to end
		    				efficiency += lengths[t];
		    				done = true;
		    				break;	
		    			}
	    			}
	    			
	    		}
    		}
    		
    		if (count == 2 && !done){
    			
    			System.out.println("in");
				char tstPtOne = startPoint;
				char tstPtTwo = startPoint;
				double tstOne = Double.MAX_VALUE;
				double tstTwo = Double.MAX_VALUE;
    			
    			for (int t = 0; t < paths.length; t++) {
	    			//only one of these should be true
    				
    				if (paths[t].equals(Astart)) {
	    				if (tstPtOne == startPoint) {
	    					tstOne = lengths[t];
		    				tstPtOne = 'A';
	    				}
	    				
	    				else {
		    				tstTwo = lengths[t];
		    				tstPtTwo = 'A';
		    				break;
	    				}
	    				
	    			}
    				
	    			if (paths[t].equals(startB)) {
	    				if (tstPtOne == startPoint) {
	    					tstOne = lengths[t];
		    				tstPtOne = 'B';
	    				}
	    				
	    				else {
		    				tstTwo = lengths[t];
		    				tstPtTwo = 'B';
		    				break;
	    				}
	    				
	    			}	
	    			if (paths[t].equals(startC)) {
	    				if (tstPtOne == startPoint) {
	    					tstOne = lengths[t];
		    				tstPtOne = 'C';
	    				}
	    				else {
		    				tstTwo = lengths[t];
		    				tstPtTwo = 'C';
		    				break;
	    				}
	    			}		    			
	    			if (paths[t].equals(startD)) {
	    				if (tstPtOne == startPoint) {
	    					tstOne = lengths[t];
		    				tstPtOne = 'D';
	    				}
		    			else {
			    			tstTwo = lengths[t];
			    			tstPtTwo = 'D';
			    			break;
		    			}
	    			}
	    		}
    			
    			String tstOneEnd = "" + tstPtOne + endPoint;
    			String tstEndOne = "" + endPoint + tstPtOne;
    			String tstTwoEnd = "" + tstPtTwo + endPoint;
     			String tstEndTwo = "" + endPoint + tstPtTwo;
     			boolean tstOneWork = false;
     			boolean tstTwoWork = false;
     			
     			for (int t = 0; t < paths.length; t++) {
     				
     				if ((paths[t].equals(tstOneEnd))||(paths[t].equals(tstEndOne))){
     					tstOne += lengths[t];
     					tstOneWork = true;
     				}
     				
     				if ((paths[t].equals(tstTwoEnd))||(paths[t].equals(tstEndTwo))){
     					tstTwo += lengths[t];
     					tstTwoWork = true;
     				}    				
     			}
     			if (!tstOneWork) {
     				tstOne = Double.MAX_VALUE;
     			}
     			
     			if (!tstTwoWork) {
     				tstTwo = Double.MAX_VALUE;
     			}
     			
     			if (tstOne < tstTwo) {
     				efficiency += tstOne;
     				done = true;
     			}
     			else {
     				efficiency += tstTwo;
     			}
    		}
    		System.out.println(efficiency);
    	}
    }
}
